{"version":3,"sources":["images/winter-icons.gif","weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Weathers","_ref","weathers","weatherList","length","map","weather","react_default","a","createElement","className","key","id","city","class","date","temp","pressure","wind","App","state","renderedWeathers","handleTrimToOne","e","preventDefault","Object","toConsumableArray","_this","slice","setState","handleTrimToFour","handleTrimToNine","_this2","this","console","log","forEach","index","API","concat","fetch","then","response","ok","Error","json","data","time","Date","toLocaleString","err","name","sunrise","sys","sunset","main","speed","sort","b","localeCompare","catch","src","picture","alt","onClick","src_weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yOC0BzBC,SAxBE,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACVC,EAAcD,EAASE,OAAUF,EAASG,IAAI,SAACC,GACjD,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CAA4CC,IAAKL,EAAQM,IACpEL,EAAAC,EAAAC,cAAA,0BAAkBH,EAAQO,MAC1BN,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,MAAM,iBAAZ,iBAA8CR,EAAQS,KAAtD,KACAR,EAAAC,EAAAC,cAAA,yBAAiBH,EAAQU,KAAzB,IAAgC,OAAhC,KAA2CT,EAAAC,EAAAC,cAAA,KAAGK,MAAM,6BACpDP,EAAAC,EAAAC,cAAA,sBAAcH,EAAQW,SAAtB,SACAV,EAAAC,EAAAC,cAAA,kBAAUH,EAAQY,KAAlB,QAA4BX,EAAAC,EAAAC,cAAA,KAAGK,MAAM,oBAKzCP,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,uEAId,OACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVP,kCCuGEgB,6MApHbC,MAAQ,CACNlB,SAAU,GACVmB,iBAAkB,MAmDpBC,gBAAkB,SAACC,GACjBA,EAAEC,iBACF,IACIH,EADQI,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMlB,UACE0B,MAAM,EAAG,GACzCD,EAAKE,SAAS,CACZR,wBAIJS,iBAAmB,SAACP,GAClBA,EAAEC,iBACF,IACIH,EADQI,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMlB,UACE0B,MAAM,EAAG,GACzCD,EAAKE,SAAS,CACZR,wBAIJU,iBAAmB,SAACR,GAClBA,EAAEC,iBACF,IACIH,EADQI,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMlB,UACE0B,MAAM,EAAG,GACzCD,EAAKE,SAAS,CACZR,yGAvEgB,IAAAW,EAAAC,KAClBC,QAAQC,IAAI,kCACZF,KAAKJ,SAAS,CACZ3B,SAAU,KAEG,CAAC,WAAY,YAAU,oBAAQ,eAAW,cAAU,cAAU,WAAY,YAAa,UAC/FkC,QAAQ,SAACvB,EAAMwB,GACpB,IAAMC,EAAG,oDAAAC,OAAuD1B,EAAvD,wDACT2B,MAAMF,GACHG,KAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,6BAEbH,KAAK,SAACC,GAAD,OAAcA,EAASG,SAC5BJ,KAAK,SAACK,GACL,IAAMC,GAAO,IAAIC,MAAOC,iBAClB3C,EAAU,CACdM,GAAIyB,EACJa,KAAK,EACLnC,KAAMgC,EACNlC,KAAMiC,EAAKK,KACXC,QAASN,EAAKO,IAAID,QAClBE,OAAQR,EAAKO,IAAIC,OACjBtC,KAAM8B,EAAKS,KAAKvC,KAChBC,SAAU6B,EAAKS,KAAKtC,SACpBC,KAAM4B,EAAK5B,KAAKsC,OAEdtD,EAAQ,GAAAqC,OAAAd,OAAAC,EAAA,EAAAD,CAAOO,EAAKZ,MAAMlB,UAAlB,CAA4BI,IACxCJ,EAAWA,EAASuD,KAAK,SAAUjD,EAAGkD,GACpC,OAAOlD,EAAEK,KAAK8C,cAAcD,EAAE7C,QAEhCmB,EAAKH,SAAS,CACZ3B,WACAmB,iBAAkBnB,MAGrB0D,MAAM,SAAAV,GACLhB,QAAQC,IAAIe,GACZlB,EAAKH,SAAS,CACZ3B,SAAU,0CAoClB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,2BACHF,EAAAC,EAAAC,cAAA,+DAKNF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKoD,IAAKC,IAASC,IAAI,eAI7BxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,UAAQuD,QAAS/B,KAAKX,iBAAtB,KACIf,EAAAC,EAAAC,cAAA,UAAQuD,QAAS/B,KAAKH,kBAAtB,KACAvB,EAAAC,EAAAC,cAAA,UAAQuD,QAAS/B,KAAKF,kBAAtB,OAGJxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwD,EAAD,CAAS/D,SAAU+B,KAAKb,MAAMC,4BA9GtB6C,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.1b29ab94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/winter-icons.57887880.gif\";","import React from 'react';\nimport './card.scss'\nconst Weathers = ({ weathers }) => {\n    const weatherList = weathers.length ? (weathers.map((weather) => {\n        return (\n            <div className=\"col-xs-12 col-sm-6 col-md-3 col-lg-3 card\" key={weather.id}>\n                <h3>Weather for: {weather.city}</h3>\n                <p><i class=\"far fa-clock\"></i> Actual time: {weather.date} </p>\n                <p>Temperature: {weather.temp} {'\\u00b0'}C <i class=\"fas fa-thermometer-half\"></i></p>\n                <p>Pressure: {weather.pressure} hPa </p>\n                <p>Wind: {weather.wind} m/s <i class=\"fas fa-wind\"></i></p>\n            </div>\n        )\n    })\n    ) : (\n            <span><h3>We are sorry, the service is temporarily unavailable :-(</h3></span>\n\n        )\n\n    return (\n        <div className=\"row\">\n            {weatherList}\n        </div>\n    )\n}\n\nexport default Weathers;","import React, { Component } from 'react';\nimport Weather from './weather';\nimport './app.scss';\nimport './index.scss';\nimport picture from './images/winter-icons.gif';\n\nclass App extends Component {\n\n  state = {\n    weathers: [],\n    renderedWeathers: []\n  }\n\n  componentDidMount() {\n    console.log('żądanie wysłane');\n    this.setState({\n      weathers: []\n    })\n    const cities = ['Warszawa', 'Kraków', 'Łódź', 'Wrocław', 'Poznań', 'Gdańsk', 'Szczecin', 'Bydgoszcz', 'Lublin']\n    cities.forEach((city, index) => {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=84aea1ab45e8d501835d9128346165db&units=metric`\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error('Nie udało się');\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString()\n          const weather = {\n            id: index,\n            err: false,\n            date: time,\n            city: data.name,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed\n          }\n          let weathers = [...this.state.weathers, weather]\n          weathers = weathers.sort(function (a, b) {\n            return a.city.localeCompare(b.city);\n          })\n          this.setState({\n            weathers,\n            renderedWeathers: weathers\n          })\n        })\n        .catch(err => {\n          console.log(err)\n          this.setState({\n            weathers: []\n          })\n        })\n    })\n  }\n\n\n  handleTrimToOne = (e) => {\n    e.preventDefault()\n    let weathers = [...this.state.weathers]\n    let renderedWeathers = weathers.slice(0, 1)\n    this.setState({\n      renderedWeathers\n    })\n  }\n\n  handleTrimToFour = (e) => {\n    e.preventDefault()\n    let weathers = [...this.state.weathers]\n    let renderedWeathers = weathers.slice(0, 4)\n    this.setState({\n      renderedWeathers\n    })\n  }\n\n  handleTrimToNine = (e) => {\n    e.preventDefault()\n    let weathers = [...this.state.weathers]\n    let renderedWeathers = weathers.slice(0, 9)\n    this.setState({\n      renderedWeathers\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-8 col-md-8\">\n              <header className=\"center\">\n                <div><h1 >Meteo Service</h1>\n                  <h4>Actual weather for nine biggest polish cities!</h4>\n                </div>\n\n              </header>\n            </div>\n            <div className=\"col-lg-4 col-md-4\">\n              <img src={picture} alt=\"picture\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"container container-span\">\n          <span>\n            Results on page:\n        <button onClick={this.handleTrimToOne}>1</button>\n            <button onClick={this.handleTrimToFour}>4</button>\n            <button onClick={this.handleTrimToNine}>9</button>\n          </span>\n        </div>\n        <div className=\"container\">\n          <Weather weathers={this.state.renderedWeathers} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}